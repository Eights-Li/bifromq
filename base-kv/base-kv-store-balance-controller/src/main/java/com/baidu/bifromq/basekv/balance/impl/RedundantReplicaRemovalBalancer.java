/*
 * Copyright (c) 2024. The BifroMQ Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *    http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package com.baidu.bifromq.basekv.balance.impl;

import static com.baidu.bifromq.basekv.balance.DescriptorUtil.organizeByEpoch;

import com.baidu.bifromq.basekv.balance.StoreBalancer;
import com.baidu.bifromq.basekv.balance.command.BalanceCommand;
import com.baidu.bifromq.basekv.balance.command.ChangeConfigCommand;
import com.baidu.bifromq.basekv.proto.KVRangeDescriptor;
import com.baidu.bifromq.basekv.proto.KVRangeStoreDescriptor;
import com.baidu.bifromq.basekv.raft.proto.ClusterConfig;
import com.baidu.bifromq.basekv.raft.proto.RaftNodeStatus;
import java.util.Collections;
import java.util.NavigableMap;
import java.util.Optional;
import java.util.Set;

/**
 * The balancer is used to remove redundant replicas which is in higher epoch from the store.
 */
public class RedundantReplicaRemovalBalancer extends StoreBalancer {
    private volatile NavigableMap<Long, Set<KVRangeStoreDescriptor>> latest = Collections.emptyNavigableMap();

    /**
     * Constructor of StoreBalancer.
     *
     * @param clusterId    the id of the BaseKV cluster which the store belongs to
     * @param localStoreId the id of the store which the balancer is responsible for
     */
    public RedundantReplicaRemovalBalancer(String clusterId, String localStoreId) {
        super(clusterId, localStoreId);
    }

    @Override
    public void update(Set<KVRangeStoreDescriptor> storeDescriptors) {
        latest = organizeByEpoch(storeDescriptors);
    }

    @Override
    public Optional<BalanceCommand> balance() {
        if (latest.size() < 2) {
            return Optional.empty();
        }
        // deal with higher epoch redundant replicas generated during bootstrap at startup time
        Set<KVRangeStoreDescriptor> storeDescriptors = latest.lastEntry().getValue();
        for (KVRangeStoreDescriptor storeDescriptor : storeDescriptors) {
            if (!storeDescriptor.getId().equals(localStoreId)) {
                continue;
            }
            for (KVRangeDescriptor rangeDescriptor : storeDescriptor.getRangesList()) {
                if (rangeDescriptor.getRole() != RaftNodeStatus.Leader) {
                    continue;
                }
                ClusterConfig config = rangeDescriptor.getConfig();
                if (config.getVotersCount() > 1 || config.getLearnersCount() > 0) {
                    return Optional.of(ChangeConfigCommand.builder()
                        .toStore(localStoreId)
                        .kvRangeId(rangeDescriptor.getId())
                        .expectedVer(rangeDescriptor.getVer())
                        .voters(Set.of(localStoreId))
                        .learners(Collections.emptySet())
                        .build());
                } else {
                    return Optional.of(ChangeConfigCommand.builder()
                        .toStore(localStoreId)
                        .kvRangeId(rangeDescriptor.getId())
                        .expectedVer(rangeDescriptor.getVer())
                        .voters(Collections.emptySet())
                        .learners(Collections.emptySet())
                        .build());
                }
            }
        }
        // TODO: deal with redundant replicas generated by repair space gap process
        return Optional.empty();
    }
}
